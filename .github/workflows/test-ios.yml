name: Test iOS

on:
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

jobs:
  ios:
    name: Create ios (free)
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.0'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.ENV_STG_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving ios dependencies
        run: cd ios && pod install --repo-update && cd ..

      - name: Install the Apple certificate and provisioning profile
        env:
          P12_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILE_DEV_BASE64: ${{ secrets.PROVISION_PROFILE_DEV_BASE64 }}
          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISION_PROFILE_BASE64 }}
          PROVISION_PROFILE_DEV_BASE64_PRO: ${{ secrets.PROVISION_PROFILE_DEV_BASE64_PRO }}
          PROVISION_PROFILE_BASE64_PRO: ${{ secrets.PROVISION_PROFILE_BASE64_PRO }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_DEV_PATH=$RUNNER_TEMP/picguard_dev.mobileprovision
          PP_PATH=$RUNNER_TEMP/picguard_appstore.mobileprovision
          PP_PRO_DEV_PATH=$RUNNER_TEMP/picguard_pro_dev.mobileprovision
          PP_PRO_PATH=$RUNNER_TEMP/picguard_pro_appstore.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $PP_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64_PRO" | base64 --decode --output $PP_PRO_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64_PRO" | base64 --decode --output $PP_PRO_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PRO_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PRO_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build Ipa
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd ios && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build ipa --dart-define-from-file=.env --target lib/main_free.dart --flavor free --export-options-plist=ios/ExportOptions/free/debug.plist

      - name: Set version
        id: version_step
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Package the build.
      - name: Copy build for iOS
        run: |
          ls -la
          cp *.ipa $GITHUB_WORKSPACE/PicGuard_"$VERSION".pre-free.ipa
        working-directory: build/ios/ipa
        env:
          VERSION: ${{ steps.version_step.outputs.version }}

      - uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-artifact
          path: ./*.ipa

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/picguard_*.mobileprovision
          rm -f .env
