name: Release
on:
  # Enable manual run
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: "Which environment are you using?"
        required: true
        default: "staging"
        options:
          - staging
          - production
      latest:
        type: boolean
        description: "Whether to create the latest version? (default to false)"
        default: false
        required: false

# Declare default permissions as readonly.
permissions: read-all

env:
  flutter-version: '3.29.3'
  rust-version: '1.86.0'

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-22.04
    outputs:
      sha: ${{ steps.sha_step.outputs.sha }}
      version: ${{ steps.version_step.outputs.version }}
      version_short: ${{ steps.version_step.outputs.version_short }}
      build_number: ${{ steps.version_step.outputs.build_number }}
      release: ${{ steps.version_step.outputs.release }}
      tag_name: ${{ steps.version_step.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set sha
        id: sha_step
        run: |
          SHA=$(git rev-parse HEAD)
          echo "SHA: $SHA."

          SHA_SHORT=$(git rev-parse --short=8 HEAD)
          echo "SHA_SHORT: $SHA_SHORT."

          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "sha_short=$SHA_SHORT" >> $GITHUB_OUTPUT

      - name: Set version
        id: version_step
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "VERSION: $VERSION."

          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/+.*//")
          echo "VERSION_SHORT: $VERSION_SHORT."

          BUILD_NUMBER=$(echo "$VERSION" | sed -e "s/.*+//")
          echo "BUILD_NUMBER: $BUILD_NUMBER."

          if [ "$ENV" == "staging" ]; then
            SUFFIX=".pre"
          elif [[ "$ENV" == "production" && "$IS_LATEST" == "false" ]]; then
            SUFFIX=".rc"
          else
            SUFFIX=""
          fi
          echo "SUFFIX: $SUFFIX"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "release=$VERSION_SHORT.$BUILD_NUMBER$SUFFIX" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION$SUFFIX" >> $GITHUB_OUTPUT
        env:
          ENV: ${{ inputs.env }}
          IS_LATEST: ${{ inputs.latest }}

      - name: Create a release
        run: |
          RELEASE_NOTES="Release created by [PicGuard](https://github.com/${{ github.repository }}) workflow run [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})<br/><br/>Please refer to [CHANGELOG.md](https://github.com/picguard/picguard/blob/main/CHANGELOG.md) for details."
          gh release create "$TAG_NAME" --draft --latest=false --prerelease=false --target "$SHA" --title "$TAG_NAME" --notes "$RELEASE_NOTES"
        env:
          SHA: ${{ steps.sha_step.outputs.sha }}
          TAG_NAME: ${{ steps.version_step.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

  gen-shasum:
    name: Gen Shasum
    runs-on: ubuntu-22.04
    needs:
      - create-release
      - apk-free
      - apk-pro
      - aab-free
      - aab-pro
      - ios-free
      - ios-pro
      - macos-dmg-free
      - macos-dmg-pro
      - macos-pkg-free
      - macos-pkg-pro
      - macos-appstore-pkg-free
      - macos-appstore-pkg-pro
      - macos-tar-free
      - macos-tar-pro
      - macos-zip-free
      - macos-zip-pro
      - linux-appimage-free
      - linux-appimage-free-arm64
      - linux-appimage-pro
      - linux-appimage-pro-arm64
      - linux-deb-free
      - linux-deb-free-arm64
      - linux-deb-pro
      - linux-deb-pro-arm64
      - linux-rpm-free
      - linux-rpm-free-arm64
      - linux-rpm-pro
      - linux-rpm-pro-arm64
      - linux-snap-free
      - linux-snap-free-arm64
      - linux-snap-pro
      - linux-snap-pro-arm64
      - linux-tar-free
      - linux-tar-free-arm64
      - linux-tar-pro
      - linux-tar-pro-arm64
      - windows-exe-free
      - windows-exe-pro
      - windows-msi-free
      - windows-msi-pro
      - windows-msix-free
      - windows-msix-pro
      - windows-zip-free
      - windows-zip-pro
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Publish a release
        run: |
          if [[ "$ENV" == "production" && "$IS_LATEST" == "true" ]]; then
            gh release edit "$TAG_NAME" --latest --draft=false --tag "$TAG_NAME" --target "$SHA"
          else
            gh release edit "$TAG_NAME" --prerelease --draft=false --tag "$TAG_NAME" --target "$SHA"
          fi
        env:
          ENV: ${{ inputs.env }}
          IS_LATEST: ${{ inputs.latest }}
          SHA: ${{ needs.create-release.outputs.sha }}
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Download assets
        uses: robinraju/release-downloader@v1
        with:
          tag: "${{ needs.create-release.outputs.tag_name }}"
          fileName: '*'
          tarBall: false
          zipBall: false
          out-file-path: 'pg-downloads'

      - name: Install @insco/shasum
        run: npm install -g @insco/shasum
      
      - name: Gen SHASUMS256.txt
        run: shasum create "$GITHUB_WORKSPACE/SHASUMS256.txt" *
        working-directory: ${{ github.workspace }}/pg-downloads

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./SHASUMS256.txt
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

  apk-free:
    name: Create apk (free)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Remove target (if exists)
        run: rustup target remove armv7-linux-androideabi || true

      - name: Add Android target
        run: rustup target add armv7-linux-androideabi

      - name: Update the default toolchain version for Cargokit
        run: sed -i -e "s/'stable'/'$RUST_VERSION'/" plugins/super_native_extensions/cargokit/build_tool/lib/src/builder.dart
        env:
          RUST_VERSION: ${{ env.rust-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - name: Build apk
        run: |
          FLAVOR="$([[ "$ENV" == "staging" ]] && echo "freeStaging" || echo "freeProduction")"
          flutter build apk --dart-define-from-file=.env --no-tree-shake-icons --target lib/main_free.dart --flavor $FLAVOR
        env:
          ENV: ${{ inputs.env }}

      # Package the build.
      - name: Copy build for Android
        run: |
          ls -la
          if [[ "$ENV" == "staging" ]]; then
            cp app-freestaging-release.apk $GITHUB_WORKSPACE/PicGuard-$RELEASE.apk
          else
            cp app-freeproduction-release.apk $GITHUB_WORKSPACE/PicGuard-$RELEASE.apk
          fi
        working-directory: build/app/outputs/flutter-apk
        env:
          ENV: ${{ inputs.env }}
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.apk
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env
          
  apk-pro:
    name: Create apk (pro)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Remove target (if exists)
        run: rustup target remove armv7-linux-androideabi || true

      - name: Add Android target
        run: rustup target add armv7-linux-androideabi

      - name: Update the default toolchain version for Cargokit
        run: sed -i -e "s/'stable'/'$RUST_VERSION'/" plugins/super_native_extensions/cargokit/build_tool/lib/src/builder.dart
        env:
          RUST_VERSION: ${{ env.rust-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY_PRO" | base64 --decode > app/upload-keystore-pro.jks
          echo "storeFile=upload-keystore-pro.jks" >> key-pro.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS_PRO" >> key-pro.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD_PRO" >> key-pro.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD_PRO" >> key-pro.properties
        env:
          PLAY_STORE_UPLOAD_KEY_PRO: ${{ secrets.PLAY_STORE_UPLOAD_KEY_PRO }}
          KEYSTORE_KEY_ALIAS_PRO: ${{ secrets.KEYSTORE_KEY_ALIAS_PRO }}
          KEYSTORE_KEY_PASSWORD_PRO: ${{ secrets.KEYSTORE_KEY_PASSWORD_PRO }}
          KEYSTORE_STORE_PASSWORD_PRO: ${{ secrets.KEYSTORE_STORE_PASSWORD_PRO }}
        working-directory: android

      # Build the application.
      - name: Build apk
        run: |
          FLAVOR="$([[ "$ENV" == "staging" ]] && echo "proStaging" || echo "proProduction")"
          flutter build apk --dart-define-from-file=.env --no-tree-shake-icons --target lib/main_pro.dart --flavor $FLAVOR
        env:
          ENV: ${{ inputs.env }}

      # Package the build.
      - name: Copy build for Android
        run: |
          ls -la
          if [[ "$ENV" == "staging" ]]; then
            cp app-prostaging-release.apk $GITHUB_WORKSPACE/PicGuard-Pro-$RELEASE.apk
          else
            cp app-proproduction-release.apk $GITHUB_WORKSPACE/PicGuard-Pro-$RELEASE.apk
          fi
        working-directory: build/app/outputs/flutter-apk
        env:
          ENV: ${{ inputs.env }}
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.apk
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env

  aab-free:
    name: Create appbundle (free)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Remove target (if exists)
        run: rustup target remove armv7-linux-androideabi || true

      - name: Add Android target
        run: rustup target add armv7-linux-androideabi

      - name: Update the default toolchain version for Cargokit
        run: sed -i -e "s/'stable'/'$RUST_VERSION'/" plugins/super_native_extensions/cargokit/build_tool/lib/src/builder.dart
        env:
          RUST_VERSION: ${{ env.rust-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - name: Build appbundle
        run: |
          FLAVOR="$([[ "$ENV" == "staging" ]] && echo "freeStaging" || echo "freeProduction")"
          flutter build appbundle --dart-define-from-file=.env --no-tree-shake-icons --target lib/main_free.dart --flavor $FLAVOR
        env:
          ENV: ${{ inputs.env }}

      # Package the build.
      - name: Copy build for Android
        if: inputs.env == 'staging'
        run: |
          ls -la
          cp *.aab $GITHUB_WORKSPACE/PicGuard-$RELEASE.aab
        working-directory: build/app/outputs/bundle/freeStagingRelease
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Copy build for Android
        if: inputs.env == 'production'
        run: |
          ls -la
          cp *.aab $GITHUB_WORKSPACE/PicGuard-$RELEASE.aab
        working-directory: build/app/outputs/bundle/freeProductionRelease
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.aab
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env

  aab-pro:
    name: Create appbundle (pro)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Remove target (if exists)
        run: rustup target remove armv7-linux-androideabi || true

      - name: Add Android target
        run: rustup target add armv7-linux-androideabi

      - name: Update the default toolchain version for Cargokit
        run: sed -i -e "s/'stable'/'$RUST_VERSION'/" plugins/super_native_extensions/cargokit/build_tool/lib/src/builder.dart
        env:
          RUST_VERSION: ${{ env.rust-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY_PRO" | base64 --decode > app/upload-keystore-pro.jks
          echo "storeFile=upload-keystore-pro.jks" >> key-pro.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS_PRO" >> key-pro.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD_PRO" >> key-pro.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD_PRO" >> key-pro.properties
        env:
          PLAY_STORE_UPLOAD_KEY_PRO: ${{ secrets.PLAY_STORE_UPLOAD_KEY_PRO }}
          KEYSTORE_KEY_ALIAS_PRO: ${{ secrets.KEYSTORE_KEY_ALIAS_PRO }}
          KEYSTORE_KEY_PASSWORD_PRO: ${{ secrets.KEYSTORE_KEY_PASSWORD_PRO }}
          KEYSTORE_STORE_PASSWORD_PRO: ${{ secrets.KEYSTORE_STORE_PASSWORD_PRO }}
        working-directory: android

      # Build the application.
      - name: Build appbundle
        run: |
          FLAVOR="$([[ "$ENV" == "staging" ]] && echo "proStaging" || echo "proProduction")"
          flutter build appbundle --dart-define-from-file=.env --no-tree-shake-icons --target lib/main_pro.dart --flavor $FLAVOR
        env:
          ENV: ${{ inputs.env }}

      # Package the build.
      - name: Copy build for Android
        if: inputs.env == 'staging'
        run: |
          ls -la
          cp *.aab $GITHUB_WORKSPACE/PicGuard-Pro-$RELEASE.aab
        working-directory: build/app/outputs/bundle/proStagingRelease
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Copy build for Android
        if: inputs.env == 'production'
        run: |
          ls -la
          cp *.aab $GITHUB_WORKSPACE/PicGuard-Pro-$RELEASE.aab
        working-directory: build/app/outputs/bundle/proProductionRelease
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.aab
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env

  ios-free:
    name: Create ios (free)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving ios dependencies
        run: pod install --repo-update
        working-directory: ios

      - name: Install the Apple certificate and provisioning profile
        env:
          P12_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILE_DEV_BASE64: ${{ secrets.PROVISION_PROFILE_DEV_BASE64 }}
          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISION_PROFILE_BASE64 }}
          PROVISION_PROFILE_DEV_BASE64_PRO: ${{ secrets.PROVISION_PROFILE_DEV_BASE64_PRO }}
          PROVISION_PROFILE_BASE64_PRO: ${{ secrets.PROVISION_PROFILE_BASE64_PRO }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_DEV_PATH=$RUNNER_TEMP/picguard_dev.mobileprovision
          PP_PATH=$RUNNER_TEMP/picguard_appstore.mobileprovision
          PP_PRO_DEV_PATH=$RUNNER_TEMP/picguard_pro_dev.mobileprovision
          PP_PRO_PATH=$RUNNER_TEMP/picguard_pro_appstore.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $PP_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64_PRO" | base64 --decode --output $PP_PRO_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64_PRO" | base64 --decode --output $PP_PRO_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PRO_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PRO_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: ios

      - name: Build ipa
        if: inputs.env == 'staging'
        run: |
          echo "╠ Releasing to adhoc..."
          flutter build ipa --dart-define-from-file=.env --target lib/main_free.dart --flavor free --export-options-plist=ios/ExportOptions/free/debug.plist

      - name: Build ipa
        if: inputs.env == 'production'
        run: |
          echo "╠ Releasing to app store..."
          flutter build ipa --dart-define-from-file=.env --target lib/main_free.dart --flavor free --export-options-plist=ios/ExportOptions/free/release.plist

      # Package the build.
      - name: Copy build for iOS
        run: |
          ls -la
          cp *.ipa $GITHUB_WORKSPACE/PicGuard-$RELEASE.ipa
        working-directory: build/ios/ipa
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.ipa
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/picguard_*.mobileprovision
          rm -f .env

  ios-pro:
    name: Create ios (pro)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving ios dependencies
        run: pod install --repo-update
        working-directory: ios

      - name: Install the Apple certificate and provisioning profile
        env:
          P12_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILE_DEV_BASE64: ${{ secrets.PROVISION_PROFILE_DEV_BASE64 }}
          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISION_PROFILE_BASE64 }}
          PROVISION_PROFILE_DEV_BASE64_PRO: ${{ secrets.PROVISION_PROFILE_DEV_BASE64_PRO }}
          PROVISION_PROFILE_BASE64_PRO: ${{ secrets.PROVISION_PROFILE_BASE64_PRO }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_DEV_PATH=$RUNNER_TEMP/picguard_dev.mobileprovision
          PP_PATH=$RUNNER_TEMP/picguard_appstore.mobileprovision
          PP_PRO_DEV_PATH=$RUNNER_TEMP/picguard_pro_dev.mobileprovision
          PP_PRO_PATH=$RUNNER_TEMP/picguard_pro_appstore.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $PP_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64_PRO" | base64 --decode --output $PP_PRO_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64_PRO" | base64 --decode --output $PP_PRO_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PRO_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PRO_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: ios

      - name: Build ipa
        if: inputs.env == 'staging'
        run: |
          echo "╠ Releasing to adhoc..."
          flutter build ipa --dart-define-from-file=.env --target lib/main_pro.dart --flavor pro --export-options-plist=ios/ExportOptions/pro/debug.plist

      - name: Build ipa
        if: inputs.env == 'production'
        run: |
          echo "╠ Releasing to app store..."
          flutter build ipa --dart-define-from-file=.env --target lib/main_pro.dart --flavor pro --export-options-plist=ios/ExportOptions/pro/release.plist

      # Package the build.
      - name: Copy build for iOS
        run: |
          ls -la
          cp *.ipa $GITHUB_WORKSPACE/PicGuard-Pro-$RELEASE.ipa
        working-directory: build/ios/ipa
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.ipa
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/picguard_*.mobileprovision
          rm -f .env

  macos-dmg-free:
    name: Create macos dmg (free)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_free.dart --flavor free

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime PicGuard.app -v
        working-directory: build/macos/Build/Products/Release-free
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "PicGuard.app" "PicGuard.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "PicGuard.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard.app"
        working-directory: build/macos/Build/Products/Release-free
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build DMG
        run: |
          bash scripts/build-dmg.sh
          mv PicGuard.dmg PicGuard-"$RELEASE"-macos-universal.dmg
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.dmg

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.dmg
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  macos-dmg-pro:
    name: Create macos dmg (pro)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_pro.dart --flavor pro

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime "PicGuard Pro.app" -v
        working-directory: build/macos/Build/Products/Release-pro
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "PicGuard Pro.app" "PicGuard Pro.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "PicGuard Pro.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard Pro.app"
        working-directory: build/macos/Build/Products/Release-pro
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build DMG
        run: |
          bash scripts/build-dmg-pro.sh
          mv "PicGuard Pro.dmg" PicGuard-Pro-"$RELEASE"-macos-universal.dmg
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.dmg

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.dmg
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  macos-pkg-free:
    name: Create macos pkg (free)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_free.dart --flavor free

      - name: Install certificates
        run: |
          # create variables
          DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_installer_certificate.p12
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_INSTALLER_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        env:
          DEVELOPER_ID_INSTALLER_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_INSTALLER_P12_BASE64_MAC }}
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Code Signing
        run: |
          # https://stackoverflow.com/questions/70991268/how-to-sign-and-notarize-a-pkg-within-a-github-actions-macos-runner
          bash scripts/sign-macos-pkg.sh "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY"
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Build pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          xcrun pkgbuild --component "./PicGuard.app" --install-location /Applications --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" PicGuard-unsigned.pkg
          mv PicGuard-unsigned.pkg "$GITHUB_WORKSPACE/PicGuard-unsigned.pkg"
        env:
          DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY }}
        working-directory: build/macos/Build/Products/Release-free

      - name: Building distribution file
        run: |
          xcrun productbuild --synthesize --product macos/packaging/pkg/requirements --package PicGuard-unsigned.pkg distribution.dist
          sed -i '' '2 a\
          \    <title>PicGuard</title>\
          \    <license file="eula.rtf"/>\
          ' distribution.dist

      - name: Sign pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          xcrun productbuild --distribution distribution.dist --resources macos/packaging/base --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" PicGuard.pkg
        env:
          DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY }}

      - name: Notarize & Staple
        run: |
          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize pkg"
          xcrun notarytool submit "PicGuard.pkg" --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format "json" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard.pkg"
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      # Package the build.
      - name: Copy build for pkg
        run: |
          ls -la *.pkg
          test -f PicGuard-unsigned.pkg && rm -f PicGuard-unsigned.pkg
          mv PicGuard.pkg PicGuard-"$RELEASE"-macos-universal.pkg
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.pkg
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  macos-pkg-pro:
    name: Create macos pkg (pro)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_pro.dart --flavor pro

      - name: Install certificates
        run: |
          # create variables
          DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_installer_certificate.p12
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_INSTALLER_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        env:
          DEVELOPER_ID_INSTALLER_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_INSTALLER_P12_BASE64_MAC }}
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Code Signing
        run: |
          # https://stackoverflow.com/questions/70991268/how-to-sign-and-notarize-a-pkg-within-a-github-actions-macos-runner
          bash scripts/sign-macos-pkg-pro.sh "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY"
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Build pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          xcrun pkgbuild --component "./PicGuard Pro.app" --install-location /Applications --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" "PicGuard Pro-unsigned.pkg"
          mv "PicGuard Pro-unsigned.pkg" "$GITHUB_WORKSPACE/PicGuard Pro-unsigned.pkg"
        env:
          DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY }}
        working-directory: build/macos/Build/Products/Release-pro

      - name: Building distribution file
        run: |
          xcrun productbuild --synthesize --product macos/packaging/pkg/requirements --package "PicGuard Pro-unsigned.pkg" distribution.dist
          sed -i '' '2 a\
          \    <title>PicGuard Pro</title>\
          \    <license file="eula-pro.rtf"/>\
          ' distribution.dist

      - name: Sign pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          xcrun productbuild --distribution distribution.dist --resources macos/packaging/base --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" "PicGuard Pro.pkg"
        env:
          DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY }}

      - name: Notarize & Staple
        run: |
          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize pkg"
          xcrun notarytool submit "PicGuard Pro.pkg" --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format "json" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard Pro.pkg"
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      # Package the build.
      - name: Copy build for pkg
        run: |
          ls -la *.pkg
          test -f "PicGuard Pro-unsigned.pkg" && rm -f "PicGuard Pro-unsigned.pkg"
          mv "PicGuard Pro.pkg" PicGuard-Pro-"$RELEASE"-macos-universal.pkg
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.pkg
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  macos-appstore-pkg-free:
    name: Create macos pkg (appstore-free)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to mac app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_free.dart --flavor free

      - name: Install certificates
        run: |
          # create variables
          # Mac Installer Distribution
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/build_mac_developer_installer_certificate.p12
          # Mac App Distribution
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_mac_developer_application_certificate.p12
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PATH=$RUNNER_TEMP/picguard_mac_appstore.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # apply provisioning profile
          # https://developer.apple.com/documentation/bundleresources/placing_content_in_a_bundle/
          # security cms -D -i picguard_mac_appstore.provisionprofile
          mv $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PATH build/macos/Build/Products/Release-free/PicGuard.app/Contents/embedded.provisionprofile
        env:
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC }}
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC }}
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Code Signing
        run: |
          # https://stackoverflow.com/questions/70991268/how-to-sign-and-notarize-a-pkg-within-a-github-actions-macos-runner
          # https://developer.apple.com/forums/thread/733942
          # https://stackoverflow.com/questions/60384835/dyld-library-not-loaded-code-signature-invalid
          # codesign -dvvv PicGuard.app
          # https://lessons.livecode.com/a/876834-signing-and-uploading-apps-to-the-mac-app-store
          
          # 1. Code sign executables
          echo "Code sign executables"
          /usr/bin/codesign --deep --force --sign "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY" build/macos/Build/Products/Release-free/PicGuard.app
          
          # 2. Code sign entitlements.plist
          echo "Code sign entitlements.plist"
          /usr/bin/codesign --force --sign "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY" --entitlements macos/Runner/AppStore-Release.entitlements build/macos/Build/Products/Release-free/PicGuard.app
          
          # 3. Just to confirm all is well, verify the code signing
          # No response means that there were no errors and it is code signed.
          # /usr/bin/codesign --verify build/macos/Build/Products/Release-free/PicGuard.app
        env:
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY }}

      - name: Create pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          # [Test the installer].  (Note the "-target /" that comes after the path to the pkg file)
          # It will go through the installation process to confirm that the installer package is OK.
          # NOTE: If the app is signed for distribution to the Mac App Store the resulting app will not run locally.
          # sudo installer -store -package <path_to_app_pkg_file> -target /
          xcrun productbuild --sign "$THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY" --component PicGuard.app /Applications PicGuard.pkg
        env:
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY }}
        working-directory: build/macos/Build/Products/Release-free

      # Package the build.
      - name: Copy build for pkg
        run: |
          ls -la *.pkg
          cp PicGuard.pkg $GITHUB_WORKSPACE/PicGuard-"$RELEASE"-macos-appstore-universal.pkg
        working-directory: build/macos/Build/Products/Release-free
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.pkg
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  macos-appstore-pkg-pro:
    name: Create macos pkg (appstore-pro)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to mac app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_pro.dart --flavor pro

      - name: Install certificates
        run: |
          # create variables
          # Mac Installer Distribution
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/build_mac_developer_installer_certificate.p12
          # Mac App Distribution
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_mac_developer_application_certificate.p12
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PRO_PATH=$RUNNER_TEMP/picguard_pro_mac_appstore.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC_PRO" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PRO_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # apply provisioning profile
          # https://developer.apple.com/documentation/bundleresources/placing_content_in_a_bundle/
          # security cms -D -i picguard_pro_mac_appstore.provisionprofile
          mv $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PRO_PATH "build/macos/Build/Products/Release-pro/PicGuard Pro.app/Contents/embedded.provisionprofile"
        env:
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC }}
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC }}
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC_PRO: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC_PRO }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Code Signing
        run: |
          # https://stackoverflow.com/questions/70991268/how-to-sign-and-notarize-a-pkg-within-a-github-actions-macos-runner
          # https://developer.apple.com/forums/thread/733942
          # https://stackoverflow.com/questions/60384835/dyld-library-not-loaded-code-signature-invalid
          # codesign -dvvv PicGuard.app
          # https://lessons.livecode.com/a/876834-signing-and-uploading-apps-to-the-mac-app-store
          
          # 1. Code sign executables
          echo "Code sign executables"
          /usr/bin/codesign --deep --force --sign "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY" build/macos/Build/Products/Release-pro/PicGuard\ Pro.app
          
          # 2. Code sign entitlements.plist
          echo "Code sign entitlements.plist"
          /usr/bin/codesign --force --sign "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY" --entitlements macos/Runner/AppStorePro-Release.entitlements build/macos/Build/Products/Release-pro/PicGuard\ Pro.app
          
          # 3. Just to confirm all is well, verify the code signing
          # No response means that there were no errors and it is code signed.
          # /usr/bin/codesign --verify "build/macos/Build/Products/Release-pro/PicGuard Pro.app"
        env:
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY }}

      - name: Create pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          # [Test the installer].  (Note the "-target /" that comes after the path to the pkg file)
          # It will go through the installation process to confirm that the installer package is OK.
          # NOTE: If the app is signed for distribution to the Mac App Store the resulting app will not run locally.
          # sudo installer -store -package <path_to_app_pkg_file> -target /
          xcrun productbuild --sign "$THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY" --component "PicGuard Pro.app" /Applications "PicGuard Pro.pkg"
        env:
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY }}
        working-directory: build/macos/Build/Products/Release-pro

      # Package the build.
      - name: Copy build for pkg
        run: |
          ls -la *.pkg
          cp "PicGuard Pro.pkg" $GITHUB_WORKSPACE/PicGuard-Pro-"$RELEASE"-macos-appstore-universal.pkg
        working-directory: build/macos/Build/Products/Release-pro
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.pkg
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  macos-tar-free:
    name: Create macos tar (free)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_free.dart --flavor free

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime PicGuard.app -v
        working-directory: build/macos/Build/Products/Release-free
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "PicGuard.app" "PicGuard.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "PicGuard.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard.app"
        working-directory: build/macos/Build/Products/Release-free
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build tar
        run: tar -czaf PicGuard-"$RELEASE"-macos-universal.tar.gz ./PicGuard.app
        working-directory: build/macos/Build/Products/Release-free
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for tar
        run: |
          ls -la *.tar.gz
          mv *.tar.gz $GITHUB_WORKSPACE/
        working-directory: build/macos/Build/Products/Release-free

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.tar.gz
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  macos-tar-pro:
    name: Create macos tar (pro)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_pro.dart --flavor pro

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime "PicGuard Pro.app" -v
        working-directory: build/macos/Build/Products/Release-pro
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "PicGuard Pro.app" "PicGuard Pro.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "PicGuard Pro.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard Pro.app"
        working-directory: build/macos/Build/Products/Release-pro
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build tar
        run: tar -czaf PicGuard-Pro-"$RELEASE"-macos-universal.tar.gz ./PicGuard\ Pro.app
        working-directory: build/macos/Build/Products/Release-pro
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for tar
        run: |
          ls -la *.tar.gz
          mv *.tar.gz $GITHUB_WORKSPACE/
        working-directory: build/macos/Build/Products/Release-pro

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.tar.gz
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  macos-zip-free:
    name: Create macos zip (free)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_free.dart --flavor free

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime PicGuard.app -v
        working-directory: build/macos/Build/Products/Release-free
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "PicGuard.app" "PicGuard.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "PicGuard.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard.app"
        working-directory: build/macos/Build/Products/Release-free
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Install p7zip
        run: |
          if ! command -v 7z >/dev/null 2>&1; then
            echo "7z not exists"
            brew install p7zip
          fi

      - name: Build zip
        run: 7z a PicGuard-"$RELEASE"-macos-universal.zip ./PicGuard.app
        working-directory: build/macos/Build/Products/Release-free
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for zip
        run: |
          ls -la *.zip
          mv PicGuard-*-macos-universal.zip $GITHUB_WORKSPACE/
        working-directory: build/macos/Build/Products/Release-free

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.zip
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  macos-zip-pro:
    name: Create macos zip (pro)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_pro.dart --flavor pro

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime "PicGuard Pro.app" -v
        working-directory: build/macos/Build/Products/Release-pro
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "PicGuard Pro.app" "PicGuard Pro.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "PicGuard Pro.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard Pro.app"
        working-directory: build/macos/Build/Products/Release-pro
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Install p7zip
        run: |
          if ! command -v 7z >/dev/null 2>&1; then
            echo "7z not exists"
            brew install p7zip
          fi

      - name: Build zip
        run: 7z a PicGuard-Pro-"$RELEASE"-macos-universal.zip ./PicGuard\ Pro.app
        working-directory: build/macos/Build/Products/Release-pro
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for zip
        run: |
          ls -la *.zip
          mv PicGuard-Pro-*-macos-universal.zip $GITHUB_WORKSPACE/
        working-directory: build/macos/Build/Products/Release-pro

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.zip
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env

  linux-appimage-free:
    name: Create linux AppImage (free)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y locate libfuse2

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Install appimagetool
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool && mv appimagetool /usr/local/bin/

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install fastforge
        run: dart pub global activate fastforge
        
      - name: Remove unused files
        run: rm -f "$(pwd)/linux/packaging/appimage/make_config-pro.yaml"

      - name: Build AppImage
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_free.dart" \
            --platform linux \
            --targets appimage \
            --artifact-name {{name}}-"$RELEASE"-{{platform}}-amd64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for AppImage
        run: |
          ls -laR
          cp ./**/*.AppImage $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.AppImage
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-appimage-free-arm64:
    name: Create linux AppImage (free arm64)
    runs-on: ubuntu-22.04-arm
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y locate libfuse2

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Install appimagetool
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage"
          # https://github.com/AppImage/AppImageKit/issues/1056#issuecomment-643382397
          # sed -i 's|AI\x02|\x00\x00\x00|' appimagetool
          chmod +x appimagetool && mv appimagetool /usr/local/bin/

      - name: Setup Flutter
        shell: bash
        run: |
          chmod +x ./scripts/install-flutter-github-actions.sh
          ./scripts/install-flutter-github-actions.sh

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install fastforge
        run: |
          dart pub global activate \
            --source git https://github.com/kjxbyz/fastforge \
            --git-ref appimage-arm64 \
            --git-path packages/fastforge
          
      - name: Remove unused files
        run: rm -f "$(pwd)/linux/packaging/appimage/make_config-pro.yaml"

      - name: Build AppImage
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_free.dart" \
            --platform linux \
            --targets appimage \
            --artifact-name {{name}}-"$RELEASE"-{{platform}}-aarch64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for AppImage
        run: |
          ls -laR
          cp ./**/*.AppImage $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.AppImage
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-appimage-pro:
    name: Create linux AppImage (pro)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y locate libfuse2

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Install appimagetool
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool && mv appimagetool /usr/local/bin/

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Update make_config.yaml
        run: |
          rm -f "$(pwd)/linux/packaging/appimage/make_config.yaml"
          mv "$(pwd)/linux/packaging/appimage/make_config-pro.yaml" "$(pwd)/linux/packaging/appimage/make_config.yaml"

      - name: Build AppImage
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_pro.dart" \
            --platform linux \
            --targets appimage \
            --artifact-name {{name}}-pro-"$RELEASE"-{{platform}}-amd64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for AppImage
        run: |
          ls -laR
          cp ./**/*.AppImage $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.AppImage
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-appimage-pro-arm64:
    name: Create linux AppImage (pro arm64)
    runs-on: ubuntu-22.04-arm
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y locate libfuse2

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Install appimagetool
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage"
          # https://github.com/AppImage/AppImageKit/issues/1056#issuecomment-643382397
          # sed -i 's|AI\x02|\x00\x00\x00|' appimagetool
          chmod +x appimagetool && mv appimagetool /usr/local/bin/

      - name: Setup Flutter
        shell: bash
        run: |
          chmod +x ./scripts/install-flutter-github-actions.sh
          ./scripts/install-flutter-github-actions.sh

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Install fastforge
        run: |
          dart pub global activate \
            --source git https://github.com/kjxbyz/fastforge \
            --git-ref appimage-arm64 \
            --git-path packages/fastforge

      - name: Update make_config.yaml
        run: |
          rm -f "$(pwd)/linux/packaging/appimage/make_config.yaml"
          mv "$(pwd)/linux/packaging/appimage/make_config-pro.yaml" "$(pwd)/linux/packaging/appimage/make_config.yaml"

      - name: Build AppImage
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_pro.dart" \
            --platform linux \
            --targets appimage \
            --artifact-name {{name}}-pro-"$RELEASE"-{{platform}}-aarch64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for AppImage
        run: |
          ls -laR
          cp ./**/*.AppImage $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.AppImage
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-deb-free:
    name: Create linux deb (free)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y rpm patchelf

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install fastforge
        run: dart pub global activate fastforge
        
      - name: Remove unused files
        run: rm -f "$(pwd)/linux/packaging/deb/make_config-pro.yaml"

      - name: Build deb
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_free.dart" \
            --platform linux \
            --targets deb \
            --artifact-name {{name}}-"$RELEASE"-{{platform}}-amd64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for deb
        run: |
          ls -laR
          cp ./**/*.deb $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.deb
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-deb-free-arm64:
    name: Create linux deb (free arm64)
    runs-on: ubuntu-22.04-arm
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        shell: bash
        run: |
          chmod +x ./scripts/install-flutter-github-actions.sh
          ./scripts/install-flutter-github-actions.sh

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install fastforge
        run: dart pub global activate fastforge
        
      - name: Remove unused files
        run: rm -f "$(pwd)/linux/packaging/deb/make_config-pro.yaml"

      - name: Build deb
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_free.dart" \
            --platform linux \
            --targets deb \
            --artifact-name {{name}}-"$RELEASE"-{{platform}}-aarch64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for deb
        run: |
          ls -laR
          cp ./**/*.deb $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.deb
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-deb-pro:
    name: Create linux deb (pro)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y rpm patchelf

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Update make_config.yaml
        run: |
          rm -f "$(pwd)/linux/packaging/deb/make_config.yaml"
          mv "$(pwd)/linux/packaging/deb/make_config-pro.yaml" "$(pwd)/linux/packaging/deb/make_config.yaml"

      - name: Build deb
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_pro.dart" \
            --platform linux \
            --targets deb \
            --artifact-name {{name}}-pro-"$RELEASE"-{{platform}}-amd64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for deb
        run: |
          ls -laR
          cp ./**/*.deb $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.deb
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-deb-pro-arm64:
    name: Create linux deb (pro arm64)
    runs-on: ubuntu-22.04-arm
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        shell: bash
        run: |
          chmod +x ./scripts/install-flutter-github-actions.sh
          ./scripts/install-flutter-github-actions.sh

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Update make_config.yaml
        run: |
          rm -f "$(pwd)/linux/packaging/deb/make_config.yaml"
          mv "$(pwd)/linux/packaging/deb/make_config-pro.yaml" "$(pwd)/linux/packaging/deb/make_config.yaml"

      - name: Build deb
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_pro.dart" \
            --platform linux \
            --targets deb \
            --artifact-name {{name}}-pro-"$RELEASE"-{{platform}}-aarch64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for deb
        run: |
          ls -laR
          cp ./**/*.deb $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.deb
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-rpm-free:
    name: Create linux rpm (free)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install fastforge
        run: dart pub global activate fastforge
        
      - name: Remove unused files
        run: rm -f "$(pwd)/linux/packaging/rpm/make_config-pro.yaml"

      - name: Build RPM
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_free.dart" \
            --platform linux \
            --targets rpm \
            --artifact-name {{name}}-"$RELEASE"-{{platform}}-amd64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for rpm
        run: |
          ls -laR
          cp ./**/*.rpm $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.rpm
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-rpm-free-arm64:
    name: Create linux rpm (free arm64)
    runs-on: ubuntu-22.04-arm
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y rpm patchelf

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        shell: bash
        run: |
          chmod +x ./scripts/install-flutter-github-actions.sh
          ./scripts/install-flutter-github-actions.sh

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64 -O /usr/bin/yq &&\
            chmod +x /usr/bin/yq
          fi
          yq --version

      - name: Update make_config.yaml
        run: |
          rm -f "$(pwd)/linux/packaging/rpm/make_config-pro.yaml"
          yq -i '.build_arch = "aarch64"' "$(pwd)/linux/packaging/rpm/make_config.yaml"

      - name: Build RPM
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_free.dart" \
            --platform linux \
            --targets rpm \
            --artifact-name {{name}}-"$RELEASE"-{{platform}}-aarch64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for rpm
        run: |
          ls -laR
          cp ./**/*.rpm $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.rpm
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-rpm-pro:
    name: Create linux rpm (pro)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Update make_config.yaml
        run: |
          rm -f "$(pwd)/linux/packaging/rpm/make_config.yaml"
          mv "$(pwd)/linux/packaging/rpm/make_config-pro.yaml" "$(pwd)/linux/packaging/rpm/make_config.yaml"

      - name: Build RPM
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_pro.dart" \
            --platform linux \
            --targets rpm \
            --artifact-name {{name}}-pro-"$RELEASE"-{{platform}}-amd64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for rpm
        run: |
          ls -laR
          cp ./**/*.rpm $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.rpm
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-rpm-pro-arm64:
    name: Create linux rpm (pro arm64)
    runs-on: ubuntu-22.04-arm
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y rpm patchelf

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        shell: bash
        run: |
          chmod +x ./scripts/install-flutter-github-actions.sh
          ./scripts/install-flutter-github-actions.sh

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64 -O /usr/bin/yq &&\
            chmod +x /usr/bin/yq
          fi
          yq --version

      - name: Update make_config.yaml
        run: |
          rm -f "$(pwd)/linux/packaging/rpm/make_config.yaml"
          mv "$(pwd)/linux/packaging/rpm/make_config-pro.yaml" "$(pwd)/linux/packaging/rpm/make_config.yaml"
          yq -i '.build_arch = "aarch64"' linux/packaging/rpm/make_config.yaml

      - name: Build RPM
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_pro.dart" \
            --platform linux \
            --targets rpm \
            --artifact-name {{name}}-pro-"$RELEASE"-{{platform}}-aarch64.{{ext}}
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for rpm
        run: |
          ls -laR
          cp ./**/*.rpm $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.rpm
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-snap-free:
    name: Create linux snap (free)
    runs-on: ubuntu-22.04
    env:
      LXD_GROUP: lxd
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup LXD
        uses: canonical/setup-lxd@v0.1.2
        with:
          channel: latest/stable
          group: ${{ env.LXD_GROUP }}

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Remove unused files
        run: |
          rm -f "$(pwd)/snap/gui/picguard-pro.desktop" \
            "$(pwd)/snap/gui/picguard-pro.png" \
            "$(pwd)/snap/snapcraft-pro.yaml"

      - name: Install snapcraft
        run: sudo snap install snapcraft --classic

      - name: Update snapcraft.yaml
        run: |
          VERSION="$VERSION_SHORT.$BUILD_NUMBER" yq -i '.version = strenv(VERSION)' snap/snapcraft.yaml
        env:
          VERSION_SHORT: ${{ needs.create-release.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}

      - name: Build snap
        run: |
          # https://snapcraft.io/docs/flutter-applications
          sudo snapcraft --output picguard-"$RELEASE"-linux-amd64.snap
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.snap

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.snap
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env
          if which snapcraft >/dev/null 2>&1; then
            echo "snapcraft exists"
            sudo snapcraft clean
          fi

  linux-snap-free-arm64:
    name: Create linux snap (free arm64)
    runs-on: ubuntu-22.04-arm
    env:
      LXD_GROUP: lxd
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup LXD
        uses: canonical/setup-lxd@v0.1.2
        with:
          channel: latest/stable
          group: ${{ env.LXD_GROUP }}

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            sudo snap install -y yq
          fi
          yq --version

      - name: Remove unused files
        run: |
          rm -f "$(pwd)/snap/gui/picguard-pro.desktop" \
            "$(pwd)/snap/gui/picguard-pro.png" \
            "$(pwd)/snap/snapcraft-pro.yaml"

      - name: Update snapcraft.yaml
        run: |
          VERSION="$VERSION_SHORT.$BUILD_NUMBER" yq -i '.version = strenv(VERSION)' snap/snapcraft.yaml
        env:
          VERSION_SHORT: ${{ needs.create-release.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}

      - name: Install snapcraft
        run: sudo snap install snapcraft --classic

      - name: Build snap
        run: |
          # https://snapcraft.io/docs/flutter-applications
          sudo snapcraft --output "picguard-"$RELEASE"-linux-aarch64.snap"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.snap

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.snap
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env
          if which snapcraft >/dev/null 2>&1; then
            echo "snapcraft exists"
            sudo snapcraft clean
          fi

  linux-snap-pro:
    name: Create linux snap (pro)
    runs-on: ubuntu-22.04
    env:
      LXD_GROUP: lxd
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup LXD
        uses: canonical/setup-lxd@v0.1.2
        with:
          channel: latest/stable
          group: ${{ env.LXD_GROUP }}

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Remove unused files
        run: |
          rm -f "$(pwd)/snap/gui/picguard.desktop" "$(pwd)/snap/gui/picguard.png"
          mv "$(pwd)/snap/snapcraft-pro.yaml" "$(pwd)/snap/snapcraft.yaml"

      - name: Install snapcraft
        run: sudo snap install snapcraft --classic

      - name: Update snapcraft.yaml
        run: |
          VERSION="$VERSION_SHORT.$BUILD_NUMBER" yq -i '.version = strenv(VERSION)' snap/snapcraft.yaml
        env:
          VERSION_SHORT: ${{ needs.create-release.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}

      - name: Build snap
        run: |
          # https://snapcraft.io/docs/flutter-applications
          sudo snapcraft --output picguard-pro-"$RELEASE"-linux-amd64.snap
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.snap

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.snap
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env
          if which snapcraft >/dev/null 2>&1; then
            echo "snapcraft exists"
            sudo snapcraft clean
          fi

  linux-snap-pro-arm64:
    name: Create linux snap (pro arm64)
    runs-on: ubuntu-22.04-arm
    env:
      LXD_GROUP: lxd
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup LXD
        uses: canonical/setup-lxd@v0.1.2
        with:
          channel: latest/stable
          group: ${{ env.LXD_GROUP }}

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Remove unused files
        run: |
          rm -f "$(pwd)/snap/gui/picguard.desktop" "$(pwd)/snap/gui/picguard.png"
          mv "$(pwd)/snap/snapcraft-pro.yaml" "$(pwd)/snap/snapcraft.yaml"

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            sudo snap install -y yq
          fi
          yq --version

      - name: Update snapcraft.yaml
        run: |
          VERSION="$VERSION_SHORT.$BUILD_NUMBER" yq -i '.version = strenv(VERSION)' snap/snapcraft.yaml
        env:
          VERSION_SHORT: ${{ needs.create-release.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}

      - name: Install snapcraft
        run: sudo snap install snapcraft --classic

      - name: Build snap
        run: |
          # https://snapcraft.io/docs/flutter-applications
          sudo snapcraft --output "picguard-pro-"$RELEASE"-linux-aarch64.snap"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.snap

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.snap
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env
          if which snapcraft >/dev/null 2>&1; then
            echo "snapcraft exists"
            sudo snapcraft clean
          fi

  linux-tar-free:
    name: Create linux tar (free)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y p7zip-full p7zip-rar

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build flutter
        run: flutter build linux --dart-define-from-file=.env --target lib/main_free.dart

      - name: Build tar
        run: |
          archiveName="picguard-"$RELEASE"-linux-amd64.tar.gz"
          tar -czaf $archiveName ./*
          mv $archiveName $GITHUB_WORKSPACE/
        working-directory: build/linux/x64/release/bundle
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for tar
        run: ls -la

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.tar.gz
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-tar-free-arm64:
    name: Create linux tar (free arm64)
    runs-on: ubuntu-22.04-arm
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y p7zip-full p7zip-rar

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        shell: bash
        run: |
          chmod +x ./scripts/install-flutter-github-actions.sh
          ./scripts/install-flutter-github-actions.sh

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build app
        run: flutter build linux --dart-define-from-file=.env --target lib/main_free.dart

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64 -O /usr/bin/yq &&\
            chmod +x /usr/bin/yq
          fi
          yq --version

      - name: Build tar
        run: |
          archiveName="picguard-"$RELEASE"-linux-aarch64.tar.gz"
          tar -czaf $archiveName ./*
          mv $archiveName $GITHUB_WORKSPACE/
        working-directory: build/linux/arm64/release/bundle
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for tar
        run: ls -la *.tar.gz

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.tar.gz
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-tar-pro:
    name: Create linux tar (pro)
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y p7zip-full p7zip-rar

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build flutter
        run: flutter build linux --dart-define-from-file=.env --target lib/main_pro.dart

      - name: Build tar
        run: |
          archiveName="picguard-pro-"$RELEASE"-linux-amd64.tar.gz"
          tar -czaf $archiveName ./*
          mv $archiveName $GITHUB_WORKSPACE/
        working-directory: build/linux/x64/release/bundle
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for tar
        run: ls -la

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.tar.gz
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  linux-tar-pro-arm64:
    name: Create linux tar (pro arm64)
    runs-on: ubuntu-22.04-arm
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y p7zip-full p7zip-rar

      - name: Install ayatana-appindicator3-0.1
        run: |
          # used by tray_manager
          sudo apt-get install -y libayatana-appindicator3-dev

      - name: Setup Flutter
        shell: bash
        run: |
          chmod +x ./scripts/install-flutter-github-actions.sh
          ./scripts/install-flutter-github-actions.sh

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_BASE64" | base64 --decode > .env
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Copy files to the linux folder
        run: |
          cp "$(pwd)/linux/pro/CMakeLists.txt" "$(pwd)/linux/CMakeLists.txt"
          cp "$(pwd)/linux/pro/my_application.cc" "$(pwd)/linux/runner/my_application.cc"

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build app
        run: flutter build linux --dart-define-from-file=.env --target lib/main_pro.dart

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64 -O /usr/bin/yq &&\
            chmod +x /usr/bin/yq
          fi
          yq --version

      - name: Build tar
        run: |
          archiveName="picguard-pro-"$RELEASE"-linux-aarch64.tar.gz"
          tar -czaf $archiveName ./*
          mv $archiveName $GITHUB_WORKSPACE/
        working-directory: build/linux/arm64/release/bundle
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for tar
        run: ls -la *.tar.gz

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.tar.gz
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f .env

  windows-exe-free:
    name: Create windows exe (free)
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: copy eula.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force

      - name: Copy ChineseSimplified.isl to C:\Program Files (x86)\Inno Setup 6\Languages\
        run: |
          copy-item -Path windows\Languages\Unofficial\*.isl -Destination 'C:\Program Files (x86)\Inno Setup 6\Languages\'

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          $yamlFile = ".\windows\packaging\exe\make_config.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          $appId = (Get-Item -Path Env:WINDOWS_EXE_APP_ID).Value
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".app_id = `"$appId`" | .publisher_name = `"$publisherName`"" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_EXE_APP_ID: ${{ secrets.WINDOWS_EXE_APP_ID }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}

      - name: Build exe
        shell: pwsh
        run: |
          fastforge package `
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_free.dart" `
            --platform windows `
            --targets exe `
            --artifact-name "{{name}}-$env:RELEASE-{{platform}}-setup-$env:Platform.{{ext}}"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Signing
        run: |
          $certificatePath = "$env:RUNNER_TEMP\picguard.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)
          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /f "$certificatePath" /fd SHA256 /t http://timestamp.comodoca.com/authenticode /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /n "$env:WINDOWS_PUBLISHER_NAME" (get-item ".\**\*.exe")
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
        working-directory: dist

      # Package the build.
      - name: Copy build for exe
        run: cp .\**\*.exe "$env:GITHUB_WORKSPACE\"
        working-directory: dist

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.exe)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\picguard.pfx") {
            echo "$env:RUNNER_TEMP\picguard.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard.pfx) doesn't exist."
          }
          
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows-exe-pro:
    name: Create windows exe (pro)
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: copy eula-pro.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula-pro.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force

      - name: Copy ChineseSimplified.isl to C:\Program Files (x86)\Inno Setup 6\Languages\
        run: |
          copy-item -Path windows\Languages\Unofficial\*.isl -Destination 'C:\Program Files (x86)\Inno Setup 6\Languages\'

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          Copy-Item -Path "$pwd\windows\pro\CMakeLists.txt" -Destination "$pwd\windows\CMakeLists.txt" -Force
          Copy-Item -Path "$pwd\windows\pro\main.cpp" -Destination "$pwd\windows\runner\main.cpp" -Force
          Copy-Item -Path "$pwd\windows\pro\Runner.rc" -Destination "$pwd\windows\runner\Runner.rc" -Force
          Copy-Item -Path "$pwd\windows\pro\app_icon.ico" -Destination "$pwd\windows\runner\resources\app_icon.ico" -Force
          
          $yamlFile = ".\windows\packaging\exe\make_config.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          $appId = (Get-Item -Path Env:WINDOWS_EXE_APP_ID_PRO).Value
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME_PRO).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".app_id = `"$appId`" | .publisher_name = `"$publisherName`" | .display_name = `"PicGuard Pro`"" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_EXE_APP_ID_PRO: ${{ secrets.WINDOWS_EXE_APP_ID_PRO }}
          WINDOWS_PUBLISHER_NAME_PRO: ${{ secrets.WINDOWS_PUBLISHER_NAME_PRO }}

      - name: Build exe
        shell: pwsh
        run: |
          fastforge package `
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_pro.dart" `
            --platform windows `
            --targets exe `
            --artifact-name "{{name}}-pro-$env:RELEASE-{{platform}}-setup-$env:Platform.{{ext}}"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Signing
        run: |
          $certificatePath = "$env:RUNNER_TEMP\picguard-pro.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE_PRO | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)
          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /f "$certificatePath" /fd SHA256 /t http://timestamp.comodoca.com/authenticode /p "$env:WINDOWS_CERTIFICATE_PASSWORD_PRO" /n "$env:WINDOWS_PUBLISHER_NAME_PRO" (get-item ".\**\*.exe")
        env:
          WINDOWS_CERTIFICATE_PRO: ${{ secrets.WINDOWS_CERTIFICATE_PRO }}
          WINDOWS_CERTIFICATE_PASSWORD_PRO: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD_PRO }}
          WINDOWS_PUBLISHER_NAME_PRO: ${{ secrets.WINDOWS_PUBLISHER_NAME_PRO }}
        working-directory: dist

      # Package the build.
      - name: Copy build for exe
        run: cp .\**\*.exe "$env:GITHUB_WORKSPACE\"
        working-directory: dist

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.exe)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\picguard-pro.pfx") {
            echo "$env:RUNNER_TEMP\picguard-pro.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard-pro.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard-pro.pfx) doesn't exist."
          }
          
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows-msi-free:
    name: Create windows msi (free)
    runs-on: windows-2022
    env:
      Platform: x64
      Configuration: Release
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Install wix toolset
        shell: pwsh
        run: |
          dotnet tool install --global wix --version 4.0.5
          wix --version

      - name: Configure .env
        run: |
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: copy eula.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env --target lib/main_free.dart

      - name: Update msi version
        shell: pwsh
        run: |
          # 文件路径
          $filePath = "msi\picguard\picguard\Package.wxs"

          # 读取文件内容
          $content = Get-Content -Path $filePath -Raw

          # 替换使用正则表达式
          $newContent = $content -replace "\b\d{1,4}\.\d{1,4}\.\d{1,4}\.\d{1,4}\b", "$env:VERSION_SHORT.$env:BUILD_NUMBER"

          # 写回文件
          Set-Content -Path $filePath -Value $newContent -NoNewline
        env:
          VERSION_SHORT: ${{ needs.create-release.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}

      - name: Create msi
        shell: pwsh
        run: |
          $certificatePath = "$env:RUNNER_TEMP\picguard.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $env:IconPath = "$pwd\windows\runner\resources\app_icon.ico"
          $env:FLUTTER_BUILD_OUTPUT_DIR = "$pwd\build\windows\$env:Platform\runner\Release"
          $env:LicensePath = "$env:FLUTTER_BUILD_OUTPUT_DIR\LICENSE.rtf"
          dotnet build .\msi\picguard\picguard\picguard.wixproj --arch "$env:Platform" --configuration "$env:Configuration"

          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /v /f "$certificatePath" /fd SHA256 /t http://timestamp.comodoca.com/authenticode /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /n "$env:WINDOWS_PUBLISHER_NAME" (get-item ".\msi\picguard\picguard\bin\$env:Platform\$env:Configuration\*\*.msi")
        env:
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      # Package the build.
      - name: Copy build for msi
        shell: pwsh
        run: |
          Rename-Item -Path "$pwd\msi\picguard\picguard\bin\$env:Platform\$env:Configuration\en-US\picguard.msi" -NewName "picguard-$env:RELEASE-windows-$env:Platform-en-US.msi"
          Rename-Item -Path "$pwd\msi\picguard\picguard\bin\$env:Platform\$env:Configuration\zh-CN\picguard.msi" -NewName "picguard-$env:RELEASE-windows-$env:Platform-zh-CN.msi"
          ls -R ".\msi\picguard\picguard\bin\$env:Platform\$env:Configuration"
          cp ".\msi\picguard\picguard\bin\$env:Platform\$env:Configuration\*\*.msi" "$env:GITHUB_WORKSPACE\"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.msi)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\picguard.pfx") {
            echo "$env:RUNNER_TEMP\picguard.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard.pfx) doesn't exist."
          }
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows-msi-pro:
    name: Create windows msi (pro)
    runs-on: windows-2022
    env:
      Platform: x64
      Configuration: Release
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Install wix toolset
        shell: pwsh
        run: |
          dotnet tool install --global wix --version 4.0.5
          wix --version

      - name: Configure .env
        run: |
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: copy eula-pro.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula-pro.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Update config
        shell: pwsh
        run: |
          Copy-Item -Path "$pwd\windows\pro\CMakeLists.txt" -Destination "$pwd\windows\CMakeLists.txt" -Force
          Copy-Item -Path "$pwd\windows\pro\main.cpp" -Destination "$pwd\windows\runner\main.cpp" -Force
          Copy-Item -Path "$pwd\windows\pro\Runner.rc" -Destination "$pwd\windows\runner\Runner.rc" -Force
          Copy-Item -Path "$pwd\windows\pro\app_icon.ico" -Destination "$pwd\windows\runner\resources\app_icon.ico" -Force

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env --target lib/main_pro.dart

      - name: Update msi version
        shell: pwsh
        run: |
          # 文件路径
          $filePath = "msi\picguard\picguard-pro\Package.wxs"

          # 读取文件内容
          $content = Get-Content -Path $filePath -Raw

          # 替换使用正则表达式
          $newContent = $content -replace "\b\d{1,4}\.\d{1,4}\.\d{1,4}\.\d{1,4}\b", "$env:VERSION_SHORT.$env:BUILD_NUMBER"

          # 写回文件
          Set-Content -Path $filePath -Value $newContent -NoNewline
        env:
          VERSION_SHORT: ${{ needs.create-release.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}

      - name: Create msi
        shell: pwsh
        run: |
          $certificatePath = "$env:RUNNER_TEMP\picguard-pro.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE_PRO | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $env:IconPath = "$pwd\windows\runner\resources\app_icon.ico"
          $env:FLUTTER_BUILD_OUTPUT_DIR = "$pwd\build\windows\$env:Platform\runner\Release"
          $env:LicensePath = "$env:FLUTTER_BUILD_OUTPUT_DIR\LICENSE.rtf"
          dotnet build .\msi\picguard\picguard-pro\picguard-pro.wixproj --arch "$env:Platform" --configuration "$env:Configuration"

          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /v /f "$certificatePath" /fd SHA256 /t http://timestamp.comodoca.com/authenticode /p "$env:WINDOWS_CERTIFICATE_PASSWORD_PRO" /n "$env:WINDOWS_PUBLISHER_NAME_PRO" (get-item ".\msi\picguard\picguard-pro\bin\$env:Platform\$env:Configuration\*\*.msi")
        env:
          WINDOWS_PUBLISHER_NAME_PRO: ${{ secrets.WINDOWS_PUBLISHER_NAME_PRO }}
          WINDOWS_CERTIFICATE_PRO: ${{ secrets.WINDOWS_CERTIFICATE_PRO }}
          WINDOWS_CERTIFICATE_PASSWORD_PRO: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD_PRO }}

      # Package the build.
      - name: Copy build for msi
        shell: pwsh
        run: |
          Rename-Item -Path "$pwd\msi\picguard\picguard-pro\bin\$env:Platform\$env:Configuration\en-US\picguard-pro.msi" -NewName "picguard-pro-$env:RELEASE-windows-$env:Platform-en-US.msi"
          Rename-Item -Path "$pwd\msi\picguard\picguard-pro\bin\$env:Platform\$env:Configuration\zh-CN\picguard-pro.msi" -NewName "picguard-pro-$env:RELEASE-windows-$env:Platform-zh-CN.msi"
          ls -R ".\msi\picguard\picguard-pro\bin\$env:Platform\$env:Configuration"
          cp ".\msi\picguard\picguard-pro\bin\$env:Platform\$env:Configuration\*\*.msi" "$env:GITHUB_WORKSPACE\"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.msi)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\picguard-pro.pfx") {
            echo "$env:RUNNER_TEMP\picguard-pro.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard-pro.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard-pro.pfx) doesn't exist."
          }
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows-msix-free:
    name: Create windows msix (free)
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: copy eula.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          # $certificatePath = "$env:RUNNER_TEMP\picguard.pfx"
          # $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          # [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $yamlFile = ".\pubspec.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          $identityName = (Get-Item -Path Env:WINDOWS_IDENTITY_NAME).Value
          $publisher = (Get-Item -Path Env:WINDOWS_PUBLISHER).Value
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME).Value
          # $certificatePassword = (Get-Item -Path Env:WINDOWS_CERTIFICATE_PASSWORD).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".msix_config.identity_name = `"$identityName`" | .msix_config.publisher = `"$publisher`" | .msix_config.publisher_display_name = `"$publisherName`" | del(.msix_config.certificate_path) | del(.msix_config.certificate_password)" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          WINDOWS_IDENTITY_NAME: ${{ secrets.WINDOWS_IDENTITY_NAME }}
          WINDOWS_PUBLISHER: ${{ secrets.WINDOWS_PUBLISHER }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env --target lib/main_free.dart

      - name: Create msix
        run: dart run msix:create --store --build-windows false --output-name "picguard-$env:RELEASE-windows-store-$env:Platform"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for msix
        run: cp .\*.msix "$env:GITHUB_WORKSPACE\"
        working-directory: build\windows\${{ env.Platform }}\runner\Release

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.msix)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\picguard.pfx") {
            echo "$env:RUNNER_TEMP\picguard.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard.pfx) doesn't exist."
          }
          
          if (test-path -Path "windows\packaging\msix\make_config.yaml") {
            echo "windows\packaging\msix\make_config.yaml"
            remove-item -Path "windows\packaging\msix\make_config.yaml" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File(windows\packaging\msix\make_config.yaml) doesn't exist."
          }
          
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows-msix-pro:
    name: Create windows msix (pro)
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: copy eula.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          Copy-Item -Path "windows\pro\CMakeLists.txt" -Destination "windows\CMakeLists.txt" -Force
          Copy-Item -Path "windows\pro\main.cpp" -Destination "windows\runner\main.cpp" -Force
          Copy-Item -Path "windows\pro\Runner.rc" -Destination "windows\runner\Runner.rc" -Force

          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          # $certificatePath = "$env:RUNNER_TEMP\picguard-pro.pfx"
          # $bytes = echo $env:WINDOWS_CERTIFICATE_PRO | %{[Convert]::FromBase64String($_)}
          # [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $yamlFile = ".\pubspec.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          $identityName = (Get-Item -Path Env:WINDOWS_IDENTITY_NAME_PRO).Value
          $publisher = (Get-Item -Path Env:WINDOWS_PUBLISHER_PRO).Value
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME_PRO).Value
          # $certificatePassword = (Get-Item -Path Env:WINDOWS_CERTIFICATE_PASSWORD_PRO).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".msix_config.display_name = `"PicGuard Pro`" | .msix_config.identity_name = `"$identityName`" | .msix_config.publisher = `"$publisher`" | .msix_config.publisher_display_name = `"$publisherName`" | del(.msix_config.certificate_path) | del(.msix_config.certificate_password)" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_CERTIFICATE_PRO: ${{ secrets.WINDOWS_CERTIFICATE_PRO }}
          WINDOWS_CERTIFICATE_PASSWORD_PRO: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD_PRO }}
          WINDOWS_IDENTITY_NAME_PRO: ${{ secrets.WINDOWS_IDENTITY_NAME_PRO }}
          WINDOWS_PUBLISHER_PRO: ${{ secrets.WINDOWS_PUBLISHER_PRO }}
          WINDOWS_PUBLISHER_NAME_PRO: ${{ secrets.WINDOWS_PUBLISHER_NAME_PRO }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env --target lib/main_pro.dart

      - name: Create msix
        run: dart run msix:create --store --build-windows false --output-name "picguard-pro-$env:RELEASE-windows-store-$env:Platform"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for msix
        run: cp .\*.msix "$env:GITHUB_WORKSPACE\"
        working-directory: build\windows\${{ env.Platform }}\runner\Release

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.msix)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\picguard-pro.pfx") {
            echo "$env:RUNNER_TEMP\picguard-pro.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard-pro.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard-pro.pfx) doesn't exist."
          }
          
          if (test-path -Path "windows\packaging\msix\make_config.yaml") {
            echo "windows\packaging\msix\make_config.yaml"
            remove-item -Path "windows\packaging\msix\make_config.yaml" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File(windows\packaging\msix\make_config.yaml) doesn't exist."
          }
          
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows-zip-free:
    name: Create windows zip (free)
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: copy eula.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Build zip
        shell: pwsh
        run: |
          fastforge package `
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_free.dart" `
            --platform windows `
            --targets zip `
            --artifact-name "{{name}}-$env:RELEASE-{{platform}}-$env:Platform.{{ext}}"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for zip
        run: cp .\**\*.zip "$env:GITHUB_WORKSPACE\"
        working-directory: dist

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.zip)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows-zip-pro:
    name: Create windows zip (pro)
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.flutter-version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: copy eula-pro.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula-pro.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Update config
        shell: pwsh
        run: |
          Copy-Item -Path "$pwd\windows\pro\CMakeLists.txt" -Destination "$pwd\windows\CMakeLists.txt" -Force
          Copy-Item -Path "$pwd\windows\pro\main.cpp" -Destination "$pwd\windows\runner\main.cpp" -Force
          Copy-Item -Path "$pwd\windows\pro\Runner.rc" -Destination "$pwd\windows\runner\Runner.rc" -Force
          Copy-Item -Path "$pwd\windows\pro\app_icon.ico" -Destination "$pwd\windows\runner\resources\app_icon.ico" -Force

      - name: Build zip
        shell: pwsh
        run: |
          fastforge package `
            --flutter-build-args "dart-define-from-file=.env,target=lib/main_pro.dart" `
            --platform windows `
            --targets zip `
            --artifact-name "{{name}}-pro-$env:RELEASE-{{platform}}-$env:Platform.{{ext}}"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for zip
        run: cp .\**\*.zip "$env:GITHUB_WORKSPACE\"
        working-directory: dist

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.zip)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }
