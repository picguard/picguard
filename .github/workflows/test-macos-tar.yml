name: Test macOS tar

on:
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

jobs:
  macos-tar:
    name: Create macos tar (free)
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.2'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.ENV_STG_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env --target lib/main_free.dart --flavor free

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime PicGuard.app -v
        working-directory: build/macos/Build/Products/Release-free
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "PicGuard.app" "PicGuard.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "PicGuard.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard.app"
        working-directory: build/macos/Build/Products/Release-free
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Set version
        id: version_step
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "VERSION: $VERSION."

          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/+.*//")
          echo "VERSION_SHORT: $VERSION_SHORT."

          BUILD_NUMBER=$(echo "$VERSION" | sed -e "s/.*+//")
          echo "BUILD_NUMBER: $BUILD_NUMBER."

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Build tar
        run: |
          echo "VERSION: $VERSION_SHORT.$BUILD_NUMBER"
          tar -czaf PicGuard-"$VERSION_SHORT.$BUILD_NUMBER"-macos-universal.tar.gz ./PicGuard.app
        working-directory: build/macos/Build/Products/Release-free
        env:
          VERSION_SHORT: ${{ steps.version_step.outputs.version_short }}
          BUILD_NUMBER: ${{ steps.version_step.outputs.build_number }}

      # Package the build.
      - name: Copy build for tar
        run: |
          ls -la *.tar.gz
          test -f PicGuard.zip && rm -f PicGuard.zip
          mv *.tar.gz $GITHUB_WORKSPACE/
        working-directory: build/macos/Build/Products/Release-free

      - uses: actions/upload-artifact@v4
        with:
          name: macos-tar-artifact
          path: ./*.tar.gz

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f .env
