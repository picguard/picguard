name: Test Windows msix (pro)

on:
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

jobs:
  get_version:
    name: Create release
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version_step.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set version
        id: version_step
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check version
        run: echo ${{ steps.version_step.outputs.version }}

  msix_pro:
    name: Create msix (pro)
    runs-on: windows-2022
    needs:
      - get_version
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.0'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          echo "$pwd"
          $bytes = echo $env:ENV_KEY | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV_KEY: ${{ secrets.ENV_STG_BASE64_WINDOWS }}

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          echo $env:RUNNER_TEMP

          Copy-Item -Path "windows\pro\CMakeLists.txt" -Destination "windows\CMakeLists.txt" -Force
          Copy-Item -Path "windows\pro\main.cpp" -Destination "windows\runner\main.cpp" -Force
          Copy-Item -Path "windows\pro\Runner.rc" -Destination "windows\runner\Runner.rc" -Force

          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $certificatePath = "$env:RUNNER_TEMP\picguard-pro.pfx"
          $bytes = echo $env:WINDOWS_CERTIFICATE_PRO | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $yamlFile = ".\pubspec.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          # $identityName = (Get-Item -Path Env:WINDOWS_IDENTITY_NAME_PRO).Value
          # $publisher = (Get-Item -Path Env:WINDOWS_PUBLISHER_PRO).Value
          # $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME_PRO).Value
          $certificatePassword = (Get-Item -Path Env:WINDOWS_CERTIFICATE_PASSWORD_PRO).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".msix_config.display_name = `"PicGuard Pro`" | .msix_config.certificate_path = `"$certificatePath`" | .msix_config.certificate_password = `"$certificatePassword`" | del(.msix_config.identity_name) | del(.msix_config.publisher) | del(.msix_config.publisher_display_name)" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_CERTIFICATE_PRO: ${{ secrets.WINDOWS_CERTIFICATE_PRO }}
          WINDOWS_CERTIFICATE_PASSWORD_PRO: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD_PRO }}
          WINDOWS_IDENTITY_NAME_PRO: ${{ secrets.WINDOWS_IDENTITY_NAME_PRO }}
          WINDOWS_PUBLISHER_PRO: ${{ secrets.WINDOWS_PUBLISHER_PRO }}
          WINDOWS_PUBLISHER_NAME_PRO: ${{ secrets.WINDOWS_PUBLISHER_NAME_PRO }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env --target lib/main_pro.dart

      - name: Crate msix
        run: |
          dart run msix:create --build-windows false --output-name "picguard_$env:VERSION`-pro_windows_x64"
        env:
          VERSION: ${{ needs.get_version.outputs.version }}

      # Package the build.
      - name: Copy build for msix
        run: ls
        working-directory: build\windows\x64\runner\Release

      - uses: actions/upload-artifact@v4
        with:
          name: windows-msix-pro-artifact
          path: .\build\windows\x64\runner\Release\*.msix

      - name: Clean up
        if: ${{ always() }}
        run: |
          ls
          if (test-path -Path "$env:RUNNER_TEMP\picguard-pro.pfx") {
            echo "$env:RUNNER_TEMP\picguard-pro.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard-pro.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard-pro.pfx) doesn't exist."
          }
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }
