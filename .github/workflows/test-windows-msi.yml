name: Test Windows msi

on:
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

jobs:
  get_version:
    name: Create release
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version_step.outputs.version }}
      version_short: ${{ steps.version_step.outputs.version_short }}
      build_number: ${{ steps.version_step.outputs.build_number }}
    steps:
      - uses: actions/checkout@v4

      - name: Set version
        id: version_step
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "VERSION: $VERSION."

          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/+.*//")
          echo "VERSION_SHORT: $VERSION_SHORT."

          BUILD_NUMBER=$(echo "$VERSION" | sed -e "s/.*+//")
          echo "BUILD_NUMBER: $BUILD_NUMBER."

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

  msi:
    name: Create msi
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - get_version
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.0'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Install wix toolset
        shell: pwsh
        run: |
          dotnet tool install --global wix
          wix --version

      - name: Configure .env
        run: |
          echo "$pwd"
          $bytes = echo $env:ENV_KEY | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV_KEY: ${{ secrets.ENV_STG_BASE64_WINDOWS }}

      - name: copy LICENSE to the windows folder
        run: Copy-Item -Path "$pwd\LICENSE" -Destination "$pwd\windows\" -Force

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env --target lib/main_free.dart

      - name: Update msi version
        shell: pwsh
        run: |
          # 文件路径
          $filePath = "msi\picguard\picguard\Package.wxs"

          # 读取文件内容
          $content = Get-Content -Path $filePath -Raw

          # 替换使用正则表达式
          $newContent = $content -replace "\b\d{1,4}\.\d{1,4}\.\d{1,4}\.\d{1,4}\b", "$env:VERSION_SHORT.$env:BUILD_NUMBER"

          # 写回文件
          Set-Content -Path $filePath -Value $newContent -NoNewline
        env:
          VERSION_SHORT: ${{ needs.get_version.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.get_version.outputs.build_number }}

      - name: Create msi
        shell: pwsh
        run: |
          echo $env:RUNNER_TEMP
          $certificatePath = "$env:RUNNER_TEMP\picguard.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $env:IconPath = "$pwd\windows\runner\resources\app_icon.ico"
          $env:FLUTTER_BUILD_OUTPUT_DIR = "$pwd\build\windows\$env:Platform\runner\Release"
          dotnet build .\msi\picguard\picguard\picguard.wixproj --arch "$env:Platform" --configuration Release

          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /v /f "$certificatePath" /fd SHA256 /t http://timestamp.comodoca.com/authenticode /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /n "$env:WINDOWS_PUBLISHER_NAME" (get-item ".\msi\picguard\picguard\bin\$env:Platform\Release\*\*.msi")
        env:
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      # Package the build.
      - name: Copy build for msi
        shell: pwsh
        run: |
          Rename-Item -Path "$pwd\msi\picguard\picguard\bin\$env:Platform\Release\en-US\picguard.msi" -NewName "picguard_$env:VERSION`_windows_$env:Platform`_en-US.msi"
          Rename-Item -Path "$pwd\msi\picguard\picguard\bin\$env:Platform\Release\zh-CN\picguard.msi" -NewName "picguard_$env:VERSION`_windows_$env:Platform`_zh-CN.msi"
        env:
          VERSION: ${{ needs.get_version.outputs.version }}

      - uses: actions/upload-artifact@v4
        with:
          name: windows-msi-artifact
          path: .\msi\picguard\picguard\bin\${{ env.Platform }}\Release\*\*.msi

      - name: Clean up
        if: ${{ always() }}
        run: |
          ls
          if (test-path -Path "$env:RUNNER_TEMP\picguard.pfx") {
            echo "$env:RUNNER_TEMP\picguard.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard.pfx) doesn't exist."
          }
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }
